1) Create a github reposistory called i.e End-to-end-Machine-Learning-Project-with-MLflow where you can make it public, add .gitignore for python and select MIT license

2) Clone the reposistory in local and open it with vs code. Also Create new conda env i.e mlflow_project and activate it.

3) Create template.py file and we are creating this template.py file because we need lots of files and folders to manage the code. So that I do not need to create files and folders manually because script will automatically creates all of them.

4)Run template.py

5) .github has .gitkeep because we will be pushing to github repo for ci-cd pipeline using github workflows.

6) commit the changes to the github using=> git add . && git commit -m "folder structure added" && git push origin main

7) Create setup.py file where it will install the files and folder as local package. setup.py will look for __init__.py (constructor file) file and it will install it as local pacakges.

8) Install the packages using requirements.txt file using command => pip install -r requirements.txt

9) commit the changes to the github using=> git add . && git commit -m "requirements added" && git push origin main

10) Got to src/mlProject/__init__.py and add the code for logging. We are adding logging code in __init__.py so that it will be easy to import and we can ignore folders as the code or logic is written in  __init__.py file.

11) Write code in main.py for logging and test it. python main.py

12) Now to src/mlProject/utils/common.py It is created so that we can write all the common codes and reuse it whenever required. For example if you want to read yaml file you can write the function in utils and reuse it wherever required.

13) Create common.py file code 

14) Go to research/trials.ipynb and understand the working of ConfigBox and its functionality. Then understand about @ensure_annotations. ensure_annotations is useful when miss any datatype when passing the arguments.

15) 